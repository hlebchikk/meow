"""
 –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å
–£—Å–ª–æ–≤–∏–µ:
–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ "–∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–∏–µ". –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å, –∏—Å–ø–æ–ª—å–∑—É—è map, lambda –∏ split.

–ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:

pairs = ["–∏–º—è:–ê–Ω—è", "–≥–æ—Ä–æ–¥:–û–¥–µ—Å—Å–∞", "—è–∑—ã–∫:Python"]
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:

{"–∏–º—è": "–ê–Ω—è", "–≥–æ—Ä–æ–¥": "–û–¥–µ—Å—Å–∞", "—è–∑—ã–∫": "Python"}
"""

pairs = ["–∏–º—è:–ê–Ω—è", "–≥–æ—Ä–æ–¥:–û–¥–µ—Å—Å–∞", "—è–∑—ã–∫:Python"]

def convert_pair():
    split_pairs = list(map(lambda x: x.split(":", 1), pairs))
    clean_space =  map(lambda x: (x[0].strip(), x[1].strip()), split_pairs)
    conversion_pairs = dict(clean_space)
    return(conversion_pairs)

print(convert_pair())

"""
 –ó–ê–î–ê–ß–ê: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
üìã –£—Å–ª–æ–≤–∏–µ:
–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö ‚Äî —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.
–§–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫: "–∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ". –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å:

—Å –ø—Ä–æ–±–µ–ª–∞–º–∏,

–±–µ–∑ –∑–Ω–∞–∫–∞ =,

—Å –ø—É—Å—Ç—ã–º–∏ –∫–ª—é—á–∞–º–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.

üéØ –¶–µ–ª—å:
–û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, —Ç–æ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –æ–¥–∏–Ω –∑–Ω–∞–∫ =.

–ò–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—É –∫–ª—é—á‚Äì–∑–Ω–∞—á–µ–Ω–∏–µ, –æ–±—Ä–µ–∑–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã.

–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫.
"""

raw_settings = [
    "—Ç–µ–º–∞ = —Å–≤–µ—Ç–ª–∞—è",
    " —è–∑—ã–∫= Python ",
    "—Ä–µ–∂–∏–º=",
    "=–∑–Ω–∞—á–µ–Ω–∏–µ",
    "–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å 80",
    "–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ=–≤–∫–ª"
]

def check(conditions):
    if conditions.count("=") != 1:
       return False

    key , meaning = conditions.split("=", 1)
    strip_key = key.strip()
    strip_meaning = meaning.strip()
    if strip_key and strip_meaning:
        return True
    else:
        return False

fil = filter(check, raw_settings)
split_list = list(map(lambda x: x.split("=", 1), fil))
strip_list = map(lambda x: (x[0].strip().lower(), x[1].strip()), split_list)

convert_list = dict(strip_list)

print(convert_list)

"""
–ó–ê–î–ê–ß–ê:–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —ç–º–æ–¥–∑–∏
üìã –£—Å–ª–æ–≤–∏–µ:
–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —ç–º–æ–¥–∑–∏:

üòä ‚Üí –ø–æ–∑–∏—Ç–∏–≤

üòê ‚Üí –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ

üò° ‚Üí –Ω–µ–≥–∞—Ç–∏–≤

–ù—É–∂–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ "–ø–æ–∑–∏—Ç–∏–≤", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ" –∏–ª–∏ "–Ω–µ–≥–∞—Ç–∏–≤", –∏—Å–ø–æ–ª—å–∑—É—è map –∏ lambda.
"""

from collections import Counter

def emoji (feedbacks_emoji):
    return feedbacks_emoji.strip()[-1]

feedbacks = [
    "–û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! üòä",
    "–ë—ã–ª–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ üòê",
    "–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω üò°",
    "–ü—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä! üòä",
    "–¢–∞–∫ —Å–µ–±–µ üòê"
]

meaning = {"üòä" : "positive", "üòê" : "netural", "üò°" : "negative"}
transformation = map(emoji, feedbacks)
correspondence = tuple(map(lambda x: meaning[x], transformation))
counter_feedbacks = Counter(correspondence)

print(counter_feedbacks)
